name: $(Build.DefinitionName)-$(SourceBranchName)_$(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
    - master
    - releases/*
    - hotfix/*

jobs:

#- job: CheckEnvironmentInBranchName
#  pool:
#    vmImage: 'macOS 10.13'
#  steps:
#  - task: Gradle@2
#    displayName: Check environment in branch name
#    env:
#      BRANCH_NAME: $(Build.SourceBranch)
#    inputs:
#      workingDirectory: ''
#      gradleWrapperFile: 'gradlew'
#      gradleOptions: '-Xmx3072m'
#      publishJUnitResults: false
#      tasks: 'shouldBuildForBranch'
#    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))


#- job: TestAndAnalyse
#  pool:
#    vmImage: 'macOS 10.13'
#  steps:
#  - template: azure-testandanalyse.yml
#  dependsOn: CheckEnvironmentInBranchName
#  condition: succeeded()

- job: BuildArtifacts
  pool:
    vmImage: 'macOS 10.13'
  steps:
#  - task: DecryptFile@1
#    displayName: Decrypt keystore
#    env:
#      KEYSTORE_ENCRYPTION_KEY: $(KEYSTORE_ENCRYPTION_KEY)
#    inputs:
#      cipher: 'des3'
#      inFile: '$(System.DefaultWorkingDirectory)/etc/dev-new.jks'
#      passphrase: $(KEYSTORE_ENCRYPTION_KEY)

  - task: Gradle@2
    displayName: Build
    env:
      KEYSTORE_KEY_ALIAS: $(KEYSTORE_KEY_ALIAS)
      KEYSTORE_PASSWORD: $(KEYSTORE_PASSWORD)
      KEY_PASSWORD: $(KEY_PASSWORD)
      BUILD_TYPE_FILTER: $(BUILD_TYPE_FILTER)
      BRANCH_NAME: $(Build.SourceBranch)
    inputs:
      workingDirectory: ''
      gradleWrapperFile: 'gradlew'
      gradleOptions: '-Xmx3072m'
      publishJUnitResults: false
#      tasks: 'configureMappingArtifacts configureApkArtifacts configureAabArtifacts -Pbuildtype=$(BUILD_TYPE_FILTER)'
      tasks: 'configureMappingArtifacts configureApkArtifacts configureAabArtifacts -Pbuildtype=$(BUILD_TYPE_FILTER)'
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))

  - task: Gradle@2
    displayName: Build release builds on master
    env:
      KEYSTORE_KEY_ALIAS: $(KEYSTORE_KEY_ALIAS)
      KEYSTORE_PASSWORD: $(KEYSTORE_PASSWORD)
      KEY_PASSWORD: $(KEY_PASSWORD)
      BUILD_TYPE_FILTER: $(BUILD_TYPE_FILTER)
      BRANCH_NAME: $(Build.SourceBranch)
    inputs:
      workingDirectory: ''
      gradleWrapperFile: 'gradlew'
      gradleOptions: '-Xmx3072m'
      publishJUnitResults: false
#      tasks: 'configureMappingArtifacts configureApkArtifacts configureAabArtifacts'
      tasks: 'configureAabArtifacts'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'),  eq(variables['SHOULD_BUILD_MASTER'], 'true'))

  - task: Gradle@2
    displayName: Release notes
    inputs:
      workingDirectory: ''
      gradleWrapperFile: 'gradlew'
      gradleOptions: '-Xmx3072m'
      publishJUnitResults: false
      tasks: 'createReleaseNotes'
    condition: succeeded()

#  - task: CopyFiles@2
#    displayName: Copy apk
#    inputs:
#      contents: '**/*.apk'
#      targetFolder: '$(build.artifactStagingDirectory)'
#
#  - task: CopyFiles@2
#    displayName: Copy mapping
#    inputs:
#      contents: '**/mapping-*.txt'
#      targetFolder: '$(build.artifactStagingDirectory)'

  - task: CopyFiles@2
    displayName: Copy aab
    inputs:
      contents: '**/*.aab'
      targetFolder: '$(build.artifactStagingDirectory)'

  - task: CopyFiles@2
    displayName: Copy release notes
    inputs:
      contents: '**/release-notes.txt'
      targetFolder: '$(build.artifactStagingDirectory)'

  - task: CopyFiles@2
    displayName: Copy fastlane
    inputs:
      contents: 'fastlane/**'
      targetFolder: '$(build.artifactStagingDirectory)'

  - task: CopyFiles@2
    displayName: Copy fastlane gemfile
    inputs:
      contents: 'Gemfile*'
      targetFolder: '$(build.artifactStagingDirectory)'

#  - task: CopyFiles@2
#    displayName: Copy service.json
#    inputs:
#      contents: '**/service.json'
#      targetFolder: '$(build.artifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(build.artifactStagingDirectory)'
      artifactName: 'BuildArtifacts'
#  dependsOn: CheckEnvironmentInBranchName
#  condition: succeeded()



