apply plugin: 'com.android.application'
apply plugin: 'jacoco'
if (!rootProject.plugins.hasPlugin("org.sonarqube")) {
	apply plugin: 'org.sonarqube'
}

apply from: '../versioning.gradle'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "hu.tvarga.androidpublishingtestnew"
        minSdkVersion 21
        targetSdkVersion 28
		versionCode readVersionCode(project)
		versionName readVersionName(project)
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
	signingConfigs {
		release {
			storeFile file("../etc/dev-new.jks.out")
			keyAlias System.getenv("KEYSTORE_KEY_ALIAS")
			storePassword System.getenv("KEYSTORE_PASSWORD")
			keyPassword System.getenv("KEY_PASSWORD")

		}
	}
	flavorDimensions 'environment'

	productFlavors {

		// Includes settings you want to keep only while developing your app.
		envUs {
			dimension 'environment'
			applicationIdSuffix ".us"
		}
		envCa {
			dimension 'environment'
			applicationIdSuffix ".ca"
		}
		envJp {
			dimension 'environment'
			applicationIdSuffix ".jp"
		}
	}
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

			signingConfig signingConfigs.release
        }
		debug {
			testCoverageEnabled true
		}
		uat {
			minifyEnabled true
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

			signingConfig signingConfigs.release
		}
    }

	bundle {
		language {
			enableSplit = false
		}
		density {
			enableSplit = true
		}
		abi {
			enableSplit = true
		}
	}
}

apply from: 'tasks.gradle'
apply from: '../release-notes.gradle'

dependencies {
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

def getAndroidTestCoverageFiles() {
	FileCollection androidTestCoverageFiles = fileTree("$buildDir/outputs/code-coverage/connected") {
		include "**/*.ec"
	}
	return androidTestCoverageFiles
}

sonarqube {
	properties {
		property "sonar.jacoco.itReportPath", getAndroidTestCoverageFiles()
		// NOTE: By default the java source set and not the android source set is used
		property "sonar.sources", android.sourceSets.main.java.srcDirs

		property "sonar.tests", "src/test/java"
		property "sonar.java.binaries", "${buildDir}/intermediates/javac/envUsDebug/compileEnvUsDebugJavaWithJavac/classes"
		property "sonar.java.test.binaries", "${buildDir}/intermediates/javac/envUsDebugUnitTest/compileEnvUsDebugUnitTestJavaWithJavac/classes"
		property "sonar.jacoco.reportPaths", "${buildDir}/jacoco/testEnvUsDebugUnitTest.exec"
		property "sonar.junit.reportsPath", "${buildDir}/test-results/testEnvUsDebugUnitTest"

		// sonar lint plugin
		//
		// ATTENTION: this file must match the chosen build flavor in the
		// CI build configurations, otherwise lint issues will not be visible in the sonar
		// report. CI Build Configs:
		//  - Android CI -> Sonar preview report generation
		//  - Android Master Sonar ->  SonarQube
		property "sonar.android.lint.report", "${buildDir}/reports/lint-results-envUsDebug.xml"
	}
}