task createGitTags() {
	doLast {
		def tagSeparator = '.'
		def envSeparator = '-'
		def availableMarkets = project.availableMarkets

		def branch = getBranch()
		def versionName = android.defaultConfig.versionName
		def versionCode = android.defaultConfig.versionCode
		def tagRoot = ''
		def envs = new ArrayList()
		def markets = new ArrayList()
		def tagNames = new ArrayList()

		tagRoot += versionName + tagSeparator + versionCode + envSeparator
		if (!project.hasProperty('buildtype')) {
			envs.add('prod')
		} else {
			envs.addAll(Arrays.asList(buildtype.split(',')))
		}
		availableMarkets.each {
			if (branch.contains('/' + it + '/')) {
				markets.add(it)
			}
		}
		envs.each { env ->
			markets.each { market ->
				def tagName = "$tagRoot$env$envSeparator$market"
				if(!findGitTag(tagName)){
					tagNames.add(tagName)
				}
			}
		}
		createGitTags(tagNames)

		println('Create git tags completed: ' + tagNames)
	}
}

def getBranch(){
	def branch = runCommand('git rev-parse --abbrev-ref HEAD')
	if(branch.equalsIgnoreCase('HEAD')){
		branch = System.getenv("BRANCH_NAME")
	}
	branch
}

def findGitTag(String tag) {
	!runCommand("git tag -l $tag").empty
}

def createGitTags(List<String> tags){
	tags.each {
		runCommand("git tag $it")
	}
	runCommand("git push --progress --porcelain --tags")
}

def runCommand(String command) {
	def process = command.execute()
	def result = ''
	process.in.eachLine {
		result += it + '\n'
	}
	process.err.eachLine {
		throw new GradleException('Error while creating git tags ' + it)
	}

	process.waitFor()
	result
}